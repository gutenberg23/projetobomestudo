
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ukkatmoathxhbaelstzo.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVra2F0bW9hdGh4aGJhZWxzdHpvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDEyODQ0NjIsImV4cCI6MjA1Njg2MDQ2Mn0.0cscM4NYNvx6jxEvy4TXLcohdP4iRPHHPWHVHF6mjuU";

// Criando cliente Supabase com configuração de serviço não disponível
const supabaseOptions = {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  global: {
    fetch: fetch.bind(globalThis)
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Criando o cliente com configurações otimizadas
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  supabaseOptions
);

// Verificação de conectividade
let isConnected = false;

// Verificar a conexão uma vez para não bloquear a inicialização
supabase.from('blog_posts').select('id').limit(1).then(
  ({ data, error }) => {
    isConnected = !error;
    if (error) {
      console.warn('Problemas de conectividade com Supabase:', error.message);
    } else {
      console.info('Conectado ao Supabase com sucesso');
    }
  }
);

// Função de recuperação de dados com fallback
export async function fetchWithFallback<T>(
  operation: () => Promise<{ data: T | null, error: any }>,
  fallbackData: T
): Promise<T> {
  try {
    const { data, error } = await operation();
    
    if (error) {
      console.warn('Erro na operação Supabase, usando fallback:', error.message);
      return fallbackData;
    }
    
    return data || fallbackData;
  } catch (e) {
    console.error('Exceção ao executar operação Supabase:', e);
    return fallbackData;
  }
}
